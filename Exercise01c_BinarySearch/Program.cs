/* ======================================================================
 * Ejercicio 01c - B칰squeda Binaria (WHILE)
 * Descripci칩n: Implementar el algoritmo de b칰squeda binaria para encontrar
 *              un elemento en un array ordenado usando un bucle while.
 * ====================================================================== */

/// <summary>
/// Busca un elemento en un array ordenado usando b칰squeda binaria.
/// </summary>
/// <param name="sortedArray">Array ordenado de enteros donde buscar.</param>
/// <param name="target">Valor a buscar en el array.</param>
void BinarySearch(int[] sortedArray, int target)
{
    // TODO 游빌 Sigue estos pasos para implementar la funci칩n:
    // 1. Prepara las variables necesarias (por ejemplo, l칤mites izquierdo y derecho).
    // 2. Usa un bucle para buscar el valor objetivo:
    //    - Calcula el 칤ndice medio.
    //    - Si el valor medio es igual al objetivo, muestra el 칤ndice y termina.
    //    - Si es menor, ajusta el l칤mite izquierdo; si es mayor, ajusta el derecho.
    // 3. Si no se encuentra, muestra el mensaje de no encontrado.
    // (Elimina este comentario y la excepci칩n al terminar)
    throw new NotImplementedException();
}

// 游빍 Datos de prueba - c치mbialos para probar tu c칩digo
int[] sortedArray = [1, 3, 5, 7, 9, 11, 13, 15];
int target = 7;

// 丘뙖잺 Lee argumentos desde la terminal (no modificar esta secci칩n)
if (args.Length >= 2)
{
    sortedArray = [.. args[0].Split(',').Select(s => int.Parse(s.Trim()))];
    target = int.Parse(args[1].Trim());
}

// 郊윒잺 Ejecuta la funci칩n con los datos configurados (no modificar)
BinarySearch(sortedArray, target);
